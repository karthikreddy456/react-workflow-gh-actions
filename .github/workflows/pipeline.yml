name: CICD PIPELINE

on:
  
    workflow_dispatch: 
        inputs:
          branch:
            required: true
            default: qa
            type: choice
            options:
                - dev
                - qa
                - prod
permissions:
  id-token: write
  contents: read
jobs:
    build-and-deploy:
        runs-on: eks_runner
        steps:
            - name: Checkout repository
              uses: actions/checkout@v2

            - name: Set up Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v1
              with:
                node-version: ${{ matrix.node-version }}
            - uses: aws-actions/configure-aws-credentials@v4
              with:
                role-to-assume: arn:aws:iam::725158397939:role/github_actions
                aws-region: ap-south-1
                

            # - name: Listing the files in the directories before running install command
            #   run: |
            #       ls -ltr

            # - name: Cache dependencies
            #   uses: actions/cache@v2
            #   with:
            #     path: |
            #       **/node_modules
            #     key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
            
            - name: Install dependencies
              run: npm install

            - name: Listing the files in the directories after running install command
              run: |
                  ls -ltr

            # - name: Run the tests and generate coverage report
            #   run: npm test -- --coverage

            - name: Build
              run: npm run build

            - name: Listing the files in the directories after running build command
              run: |
                  ls -ltr

            # - name: Configure AWS credentials
            #   uses: aws-actions/configure-aws-credentials@v2
            #   with:
            #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            #     aws-region: ap-south-1

            # - name: Configure AWS Credentials
            #   uses: aws-actions/configure-aws-credentials@v1
            #   with:
            #     role-to-assume: arn:aws:iam::725158397939:role/github_actions_accessecr
            #     aws-region: ap-south-1

            - name: Settingc Env variables based on ECR
              run: |
                echo "BUILD_NAME=default/myrepository123" >> $GITHUB_ENV
                echo "IMAGE_TAG=${{ github.run_number }}" >> $GITHUB_ENV
                echo "REPOSITORY=725158397939.dkr.ecr.ap-south-1.amazonaws.com" >> $GITHUB_ENV

            - name: dockercommands to push into ecr
              run: |
                aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 725158397939.dkr.ecr.ap-south-1.amazonaws.com
                docker build -t $BUILD_NAME:$IMAGE_TAG .
                docker tag $BUILD_NAME:$IMAGE_TAG $REPOSITORY/$BUILD_NAME:$IMAGE_TAG
                docker push $REPOSITORY/$BUILD_NAME:$IMAGE_TAG

            # - name: Deploy
            #   run: |
            #     git config --global user.name $user_name
            #     git config --global user.email $user_email
            #     git remote set-url origin https://${github_token}@github.com/${repository}
            #     npm run deploy
            #   env:
            #     user_name: 'github-actions[bot]'
            #     user_email: 'github-actions[bot]@users.noreply.github.com'
            #     github_token: ${{ secrets.ACTIONS_DEPLOY_ACCESS_TOKEN }}
            #     repository: ${{ github.repository }}

            # -------------------------------------------------------------------------------------------
            
            - name: set environment variables
              run : |
                if [ "${{ github.event.inputs.environment }}" == "dev" ]; then
                 echo "Environment=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
                 echo "IMAGE_TAG=${{ github.run_number }}" >> $GITHUB_ENV                  
                  
                elif [ "${{ github.event.inputs.environment }}" == "qa" ]; then
                 echo "Environment=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
                 echo "IMAGE_TAG=${{ github.run_number }}" >> $GITHUB_ENV 

                elif [ "${{ github.event.inputs.environment }}" == "prod" ]; then
                 echo "Environment=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
                 echo "IMAGE_TAG=${{ github.run_number }}" >> $GITHUB_ENV
                fi
            # - name: Login to Amazon ECR
            #   id: login-ecr
            #   uses: aws-actions/amazon-ecr-login@v2

            # - name: Setting Env variables based on ECR
            #   run: |
            #     echo "REPOSITORY=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_ENV
            - name: print the environmental variables
              run: |
                echo "The environment variable Environment is: $Environment"
                echo "The image Tag is: $IMAGE_TAG"
               
              # echo "THe ECR Repository is: $REPOSITORY"
            # - name: Update Helm chart values
            #   run: |
            #      helm upgrade --install my-application ./helm_chart --set image.repository=725158397939.dkr.ecr.ap-south-1.amazonaws.com/default/myrepository123 --set image.tag=latest --namespace default



        
