name: CICD PIPELINE

on:
    workflow_dispatch: 
        inputs:
            environment:
                description: 'Executed based on env selected'
                required: true
                default: qa
                type: choice
                options:
                    - dev
                    - qa
                    - prod

jobs:
    build-and-deploy:
        runs-on: ubuntu-latest
        strategy:
          matrix:
            node-version: [12.22.12]
        steps:
            - name: Checkout repository
              uses: actions/checkout@v2

            - name: Set up Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v1
              with:
                node-version: ${{ matrix.node-version }}

            - name: Cache dependencies
              uses: actions/cache@v2
              with:
                path: |
                  **/node_modules
                key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
            
            - name: Install dependencies
              run: npm install

            - name: Run the tests and generate coverage report
              run: npm test -- --coverage

            - name: Build
              run: npm run build

            # - name: Configure AWS credentials
            #   uses: aws-actions/configure-aws-credentials@v2
            #   with:
            #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            #     aws-region: ap-south-1

            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                role-to-assume: arn:aws:iam::725158397939:role/github_actions_accessecr
                aws-region: ap-south-1

            

            - name: dockercommands
              run: |
                aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 725158397939.dkr.ecr.ap-south-1.amazonaws.com
                docker build -t default/myrepository123 .
                docker tag default/myrepository123:latest 725158397939.dkr.ecr.ap-south-1.amazonaws.com/default/myrepository123:latest
                docker push 725158397939.dkr.ecr.ap-south-1.amazonaws.com/default/myrepository123:latest

            # - name: Deploy
            #   run: |
            #     git config --global user.name $user_name
            #     git config --global user.email $user_email
            #     git remote set-url origin https://${github_token}@github.com/${repository}
            #     npm run deploy
            #   env:
            #     user_name: 'github-actions[bot]'
            #     user_email: 'github-actions[bot]@users.noreply.github.com'
            #     github_token: ${{ secrets.ACTIONS_DEPLOY_ACCESS_TOKEN }}
            #     repository: ${{ github.repository }}

            # -------------------------------------------------------------------------------------------

            - name: set environment variables
              run : |
                if [ "${{ github.event.inputs.environment }}" == "dev" ]; then
                #   echo "Environment=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
                    
                  
                elif [ "${{ github.event.inputs.environment }}" == "qa" ]; then
                #   echo "Environment=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
                  
                elif [ "${{ github.event.inputs.environment }}" == "prod" ]; then
                #   echo "Environment=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
                fi
            - name: print the environmental variables
              run: |
            #    echo "The environment variable Environment is: $Environment"


        
